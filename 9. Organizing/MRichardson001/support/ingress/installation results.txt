RESOURCES:
==> v1/Pod(related)
NAME                                                      READY  STATUS             RESTARTS  AGE
your-puma-nginx-ingress-controller-66dfc67485-qj4mj       0/1    ContainerCreating  0         1s
your-puma-nginx-ingress-controller-66dfc67485-rsdgm       0/1    ContainerCreating  0         1s
your-puma-nginx-ingress-default-backend-7d7858c498-qc8z5  0/1    ContainerCreating  0         1s

==> v1/Service
NAME                                     TYPE          CLUSTER-IP    EXTERNAL-IP  PORT(S)                     AGE
your-puma-nginx-ingress-controller       LoadBalancer  10.0.198.246  <pending>    80:31875/TCP,443:32646/TCP  1s
your-puma-nginx-ingress-default-backend  ClusterIP     10.0.58.26    <none>       80/TCP                      1s

==> v1/ServiceAccount
NAME                     SECRETS  AGE
your-puma-nginx-ingress  1        1s

==> v1beta1/ClusterRole
NAME                     AGE
your-puma-nginx-ingress  1s

==> v1beta1/ClusterRoleBinding
NAME                     AGE
your-puma-nginx-ingress  1s

==> v1beta1/Deployment
NAME                                     READY  UP-TO-DATE  AVAILABLE  AGE
your-puma-nginx-ingress-controller       0/2    2           0          1s
your-puma-nginx-ingress-default-backend  0/1    1           0          1s

==> v1beta1/PodDisruptionBudget
NAME                                MIN AVAILABLE  MAX UNAVAILABLE  ALLOWED DISRUPTIONS  AGE
your-puma-nginx-ingress-controller  1              N/A              0                    1s

==> v1beta1/Role
NAME                     AGE
your-puma-nginx-ingress  1s

==> v1beta1/RoleBinding
NAME                     AGE
your-puma-nginx-ingress  1s


NOTES:
The nginx-ingress controller has been installed.
It may take a few minutes for the LoadBalancer IP to be available.
You can watch the status by running 'kubectl --namespace kube-system get services -o wide -w your-puma-nginx-ingress-controller'

An example Ingress that makes use of the controller:

  apiVersion: extensions/v1beta1
  kind: Ingress
  metadata:
    annotations:
      kubernetes.io/ingress.class: nginx
    name: example
    namespace: foo
  spec:
    rules:
      - host: www.example.com
        http:
          paths:
            - backend:
                serviceName: exampleService
                servicePort: 80
              path: /
    # This section is only required if TLS is to be enabled for the Ingress
    tls:
        - hosts:
            - www.example.com
          secretName: example-tls

If TLS is enabled for the Ingress, a Secret containing the certificate and key must also be provided:

  apiVersion: v1
  kind: Secret
  metadata:
    name: example-tls
    namespace: foo
  data:
    tls.crt: <base64 encoded cert>
    tls.key: <base64 encoded key>
  type: kubernetes.io/tls